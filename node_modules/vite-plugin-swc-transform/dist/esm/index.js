import { createFilter } from '@rollup/pluginutils';
import { transform } from '@swc/core';
import { checkSwcOptionsOnce } from './check-options-once.js';
import { getTransformOptions } from './get-transform-options.js';

const EMPTY_OBJECT = Object.freeze({});
let _swcOptions = EMPTY_OBJECT;
function transformFile(id, code, swcOptions, suppressLegacyDecoratorNoExplicitUDFCFWarning) {
    const [filepath] = id.split("?", 1);
    if (_swcOptions === EMPTY_OBJECT) {
        const { jsc, legacyDecorator } = checkSwcOptionsOnce({
            swcOptions,
            suppressLegacyDecoratorNoExplicitUDFCFWarning
        });
        _swcOptions = getTransformOptions({
            swcOptions,
            jsc,
            legacyDecorator
        });
    }
    const transformOptions = Object.assign({
        filename: id,
        sourceFileName: filepath
    }, _swcOptions);
    return transform(code, transformOptions);
}
function createViteSWCTransformPlugin({ include, exclude, suppressLegacyDecoratorNoExplicitUDFCFWarning = false, swcOptions } = {}) {
    const filter = createFilter(include ?? /\.tsx?$/, exclude ?? /node_modules/);
    return {
        name: "swc-transform",
        enforce: "pre",
        config (config) {
            config.esbuild = false;
            config.build = Object.assign(config.build || {}, {
                target: "esnext"
            });
        },
        transform (code, id) {
            if (!filter(id)) return null;
            return transformFile(id, code, swcOptions ?? EMPTY_OBJECT, suppressLegacyDecoratorNoExplicitUDFCFWarning);
        }
    };
}

export { createViteSWCTransformPlugin as default };
//# sourceMappingURL=index.js.map
